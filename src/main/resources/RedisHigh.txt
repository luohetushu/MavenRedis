Redis 数据备份与恢复:
Redis SAVE 命令用于创建当前数据库的备份
    如：redis 127.0.0.1:6379> SAVE
        OK
    该命令将在 redis 安装目录中创建 dump.rdb 文件
如果要恢复数据：只需将备份文件 (dump.rdb) 移动到 redis 安装目录并启动服务即可



安全：
查看本地 redis 密码验证：
    localhost:6379> config get requirepass
    1) "requirepass"
    2) "123456"
设置本地 redis 密码验证：
    localhost:6379> config set requirepass "123456"
    OK
设置密码后，当启动本地 redis 服务（redis-server），进行连接（redis-cli）后，需要进行密码认证才能进行操作：
    127.0.0.1:6379> AUTH 123456
    OK
否则出现如下问题：
    127.0.0.1:6379> keys *
    (error) NOAUTH Authentication required.



Redis 性能测试：通过同时执行多个命令实现的
todo 注意：该命令是在 redis 的目录下执行的，而不是 redis 客户端的内部指令
redis 性能测试的基本命令：redis-benchmark [option] [option value]
redis 性能测试工具可选参数：
序号	选项	     描述	                            默认值
1	-h	     指定服务器主机名	                    127.0.0.1
2	-p	     指定服务器端口	                    6379
3	-s	     指定服务器                          socket
4	-c	     指定并发连接数	                    50
5	-n	     指定请求数	                        10000
6	-d	     以字节的形式指定 SET/GET 值的数据大小	2
7	-k	     1=keep alive；0=reconnect	        1
8	-r	     SET/GET/INCR 使用随机 key, SADD 使用随机值
9	-P	     通过管道传输 <numreq> 请求	        1
10	-q	     强制退出 redis。仅显示 query/sec 值
11	--csv	 以 CSV 格式输出
12	-l	     生成循环，永久执行测试
13	-t	     仅运行以逗号分隔的测试命令列表。
14	-I	     Idle 模式。仅打开 N 个 idle 连接并等待。





Redis 客户端连接
Redis 通过监听一个 TCP 端口或者 Unix socket 的方式来接收来自客户端的连接，连接建立后：
    1、客户端 socket 会被设置为非阻塞模式，因为 Redis 在网络事件处理上采用的是非阻塞多路复用模型。
    2、为这个 socket 设置 TCP_NODELAY 属性，禁用 Nagle 算法
    3、创建一个可读的文件事件用于监听这个客户端 socket 的数据发送
在服务启动时设置客户端最大连接数为 100000：
    redis-server --maxclients 100000
客户端命令：
1	CLIENT LIST	    返回连接到 redis 服务的客户端列表
2	CLIENT SETNAME	设置当前连接的名称
3	CLIENT GETNAME	获取通过 CLIENT SETNAME 命令设置的服务名称
4	CLIENT PAUSE	挂起客户端连接，指定挂起的时间以毫秒计
5	CLIENT KILL	    关闭客户端连接



Redis是一种基于客户端-服务端模型以及请求/响应协议的TCP服务，通常情况下一个请求会遵循以下步骤：
    客户端向服务端发送一个查询请求，并监听Socket返回，通常是以阻塞模式，等待服务端响应
    服务端处理命令，并将结果返回给客户端
Redis 管道技术：
    在服务端未响应时，客户端可以继续向服务端发送请求，并最终一次性读取所有服务端的响应
Redis 管道技术优势：
    提高了 redis 服务的性能
如：$(echo -en "PING\r\n SET runoobkey redis\r\nGET runoobkey\r\nINCR visitor\r\nINCR visitor\r\nINCR visitor\r\n";
     sleep 10) | nc localhost 6379
   +PONG
   +OK
   redis
   :1
   :2
   :3
   这些命令一次性向 redis 服务提交，并最终一次性读取所有服务端的响应







